{"ast":null,"code":"import { all, call, takeLatest, put, select } from 'redux-saga/effects';\nimport { getUserCartRef } from '../../firebase/firebase.utils';\nimport UserActionTypes from '../user/user.types'; // import {clearCart} from './cart.actions';\n\nimport { selectCurrentUser } from '../user/user.selectors';\nimport { clearCart, setCartFromFirebase } from './cart.actions';\nimport { selectCartItems } from './cart.selectors';\nimport CartActionTypes from './cart.types';\nexport function* clearCartOnSignOut() {\n  yield put(clearCart());\n}\nexport function* updateCartInFirebase() {\n  const currentUser = yield select(selectCurrentUser);\n\n  if (currentUser) {\n    try {\n      const cartRef = yield getUserCartRef(currentUser.id);\n      const cartItems = yield select(selectCartItems);\n      yield cartRef.update({\n        cartItems\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n}\nexport function* checkCartFromFirebase({\n  payload: user\n}) {\n  const cartRef = yield getUserCartRef(user.id);\n  const cartSnapshot = yield cartRef.get();\n  yield put(setCartFromFirebase(cartSnapshot.data().cartItems));\n}\nexport function* onSignOutSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\nexport function* onUserSignIn() {\n  yield takeLatest(UserActionTypes.SIGN_IN_SUCCESS, checkCartFromFirebase);\n}\nexport function* onCartChange() {\n  yield takeLatest([CartActionTypes.ADD_ITEM, CartActionTypes.REMOVE_ITEM, CartActionTypes.CLEAR_ITEM_FROM_CART], updateCartInFirebase);\n}\nexport function* cartSaga() {\n  yield all([yield all([call(onSignOutSuccess), call(onCartChange), call(onUserSignIn)])]);\n}","map":{"version":3,"sources":["/Users/maxim/Code/Udemy/react/complete-react-developer-zero-to-mastery/crown-store/client/src/redux/cart/cart.saga.js"],"names":["all","call","takeLatest","put","select","getUserCartRef","UserActionTypes","selectCurrentUser","clearCart","setCartFromFirebase","selectCartItems","CartActionTypes","clearCartOnSignOut","updateCartInFirebase","currentUser","cartRef","id","cartItems","update","error","console","log","checkCartFromFirebase","payload","user","cartSnapshot","get","data","onSignOutSuccess","SIGN_OUT_SUCCESS","onUserSignIn","SIGN_IN_SUCCESS","onCartChange","ADD_ITEM","REMOVE_ITEM","CLEAR_ITEM_FROM_CART","cartSaga"],"mappings":"AAAA,SAAQA,GAAR,EAAaC,IAAb,EAAmBC,UAAnB,EAA+BC,GAA/B,EAAoCC,MAApC,QAAiD,oBAAjD;AACA,SAASC,cAAT,QAA+B,+BAA/B;AACA,OAAOC,eAAP,MAA4B,oBAA5B,C,CACA;;AACA,SAASC,iBAAT,QAAkC,wBAAlC;AACA,SAASC,SAAT,EAAoBC,mBAApB,QAA+C,gBAA/C;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,kBAAV,GAA+B;AACrC,QAAMT,GAAG,CAACK,SAAS,EAAV,CAAT;AACA;AAED,OAAO,UAAUK,oBAAV,GAAiC;AACvC,QAAMC,WAAW,GAAG,MAAMV,MAAM,CAACG,iBAAD,CAAhC;;AACA,MAAIO,WAAJ,EAAiB;AACf,QAAI;AACF,YAAMC,OAAO,GAAG,MAAMV,cAAc,CAACS,WAAW,CAACE,EAAb,CAApC;AACA,YAAMC,SAAS,GAAG,MAAMb,MAAM,CAACM,eAAD,CAA9B;AACA,YAAMK,OAAO,CAACG,MAAR,CAAe;AAAED,QAAAA;AAAF,OAAf,CAAN;AACD,KAJD,CAIE,OAAOE,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF;AACD;AAED,OAAO,UAAUG,qBAAV,CAAgC;AAAEC,EAAAA,OAAO,EAAEC;AAAX,CAAhC,EAAmD;AACzD,QAAMT,OAAO,GAAG,MAAMV,cAAc,CAACmB,IAAI,CAACR,EAAN,CAApC;AACA,QAAMS,YAAY,GAAG,MAAMV,OAAO,CAACW,GAAR,EAA3B;AACA,QAAMvB,GAAG,CAACM,mBAAmB,CAACgB,YAAY,CAACE,IAAb,GAAoBV,SAArB,CAApB,CAAT;AACA;AAED,OAAO,UAAUW,gBAAV,GAA6B;AACnC,QAAM1B,UAAU,CAACI,eAAe,CAACuB,gBAAjB,EAAmCjB,kBAAnC,CAAhB;AACA;AAED,OAAO,UAAUkB,YAAV,GAAyB;AAC/B,QAAM5B,UAAU,CAACI,eAAe,CAACyB,eAAjB,EAAkCT,qBAAlC,CAAhB;AACA;AAED,OAAO,UAAUU,YAAV,GAAyB;AAC/B,QAAM9B,UAAU,CACd,CACES,eAAe,CAACsB,QADlB,EAEEtB,eAAe,CAACuB,WAFlB,EAGEvB,eAAe,CAACwB,oBAHlB,CADc,EAMdtB,oBANc,CAAhB;AAQA;AAED,OAAO,UAAUuB,QAAV,GAAqB;AAC3B,QAAMpC,GAAG,CAAC,CACT,MAAMA,GAAG,CAAC,CAACC,IAAI,CAAC2B,gBAAD,CAAL,EAAyB3B,IAAI,CAAC+B,YAAD,CAA7B,EAA6C/B,IAAI,CAAC6B,YAAD,CAAjD,CAAD,CADA,CAAD,CAAT;AAGA","sourcesContent":["import {all, call, takeLatest, put, select} from 'redux-saga/effects';\nimport { getUserCartRef } from '../../firebase/firebase.utils';\nimport UserActionTypes from '../user/user.types';\n// import {clearCart} from './cart.actions';\nimport { selectCurrentUser } from '../user/user.selectors';\nimport { clearCart, setCartFromFirebase } from './cart.actions';\nimport { selectCartItems } from './cart.selectors';\nimport CartActionTypes from './cart.types';\n\nexport function* clearCartOnSignOut() {\n yield put(clearCart())\n}\n\nexport function* updateCartInFirebase() {\n const currentUser = yield select(selectCurrentUser);\n if (currentUser) {\n   try {\n     const cartRef = yield getUserCartRef(currentUser.id);\n     const cartItems = yield select(selectCartItems);\n     yield cartRef.update({ cartItems });\n   } catch (error) {\n     console.log(error);\n   }\n }\n}\n\nexport function* checkCartFromFirebase({ payload: user }) {\n const cartRef = yield getUserCartRef(user.id);\n const cartSnapshot = yield cartRef.get();\n yield put(setCartFromFirebase(cartSnapshot.data().cartItems));\n}\n\nexport function* onSignOutSuccess() {\n yield takeLatest(UserActionTypes.SIGN_OUT_SUCCESS, clearCartOnSignOut);\n}\n\nexport function* onUserSignIn() {\n yield takeLatest(UserActionTypes.SIGN_IN_SUCCESS, checkCartFromFirebase);\n}\n\nexport function* onCartChange() {\n yield takeLatest(\n   [\n     CartActionTypes.ADD_ITEM,\n     CartActionTypes.REMOVE_ITEM,\n     CartActionTypes.CLEAR_ITEM_FROM_CART\n   ],\n   updateCartInFirebase\n );\n}\n\nexport function* cartSaga() {\n yield all([\n  yield all([call(onSignOutSuccess), call(onCartChange), call(onUserSignIn)])\n ])\n}"]},"metadata":{},"sourceType":"module"}